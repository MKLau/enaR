library(enaR)
write.nos
data(oyster)
write.nea(oyster,file.name='~/Desktop/test.csv',sep=',')
?write.table
write.nea(oyster,file.name='~/Desktop/test.csv',sep=',',row.names=TRUE)
exists('~/Desktop/test.csv')
exists('~/Desktop/test.csv')
?exists
exists(file.name)
file.name='blah'
exists(file.name)
file.name='~/Desktop/test.csv'
exists(file.name)
exists('ls')
exists('ls',2)
exists('ls',3)
exists('ls',1)
exists('ls',1,inherits=FALSE)
x=Inf
is.infinite(x)
x=-Inf
is.infinite(x)
opar <- par()
par() <- opar
par(opar)
balance(oyster)
balance
enaEnviron(oyster)
enaControl(oyster)
pack
library(igraph)
pack
library(devtools)
?install_github
install_github(username='MKLau',repo='SEELab/enaR',ref='beta')
install_github(username='MKLau',repo='SEELab/enaR',ref='beta')
ls
example(enaR)
example('enaR')
data(oyster)
enaAll(oyster)
library(enaR)
m <- read.scor("~/research/models_cpy/oyster.dat")
m%e%"flow"
as.matrix(m,attrname="flow")
m
?network.edgelist
?network
?set.network.attribute
delete.network.attribute(m,"flow")
m
cycliv.R
m
as.matrix(m,attrname="flow")
cycliv(m)
m
source("cycliv.R")
source("cycliv.R")
cycliv(m)
source(TET.R)
source("TET.R")
TET(m)
source(dir())
dir()
mode(dir())
source("./*")
sapply(dir(),source)
ls
ls()
TET(m)
m
source("enaCycle.R")
m
as.matrix(m, attrname = 'flow')
data()
?data
data(oyster)
oyster
a=cm(oyster)
a
oyster=cm(oyster)
oyster
oyster
u <- unpack(oyster0
)
u <- unpack(oyster)
u
attributes(u)
oyster
data(oyster)
rm(oyster)
ls()
rm(list=ls())
data(oyster0
)
data(oyster)
oyster
m <- cm(oyster)
m
source('pack.R')
m <- cm(oyster)
source('unpack.R')
m <- cm(oyster)
oyster
u <- unpack(oyster)
u
pack(u$F,u$z,u$r,u$e,u$y,u$X,u$Living)
pack('flow'=u$F,u$z,u$r,u$e,u$y,u$X,u$Living)
u$F
data(oyster)
oyster
get.vertex.attribute(x,'Living')
get.vertex.attribute(oyster,'Living')
get.vertex.attribute(oyster,'living')
a
a <- cm(oyster)
 oyster
get.vertex.attribute(oyster,'export')
get.vertex.attribute(oyster,"export")
get.vertex.attribute(oyster,"input")
get.vertex.attribute(oyster,"living")
get.vertex.attribute(oyster,"respiration")
ssCheck(oyster)
oyster%n%'flow'
pack('flow'=oyster%n%'flow')
flow <- oyster%n%'flow'
x <- oyster
'input'
input
respiration
get.vertex.attribute(x,'input')
attributes(x)
x[[1]]
y
flow
y
ssCheck(y)
as.extended(y)
source("as.extended.R")
ssCheck(y)
flow <- as.matrix(y,attrname = 'flow')
flow
nrow(flow)
source(ssCheck)
source('ssCheck.R')
source('as.extended.R')
cm(oyster)
a <- cm(oyster)
a
oyster <- cm(oyster)
?save
save(oyster,file="../data/oyster.rda")
length(a)
a[[1]]
a[[58]]
a[[4]]
a[[1]]
oyster
cm
cm(oyster)
sourc('pack.R')
source('pack.R')
cm(oyster)
pack
pack
oyster
oyster%n%'flow'
f <- oyster%n%'flow'
y <- network(f,directed=TRUE,loops=TRUE)
y
y%v%'vertex.names'
q()
library(enaR)
data(enaModels)
enaModels[[1]]
names(enaModels)[[6]]
enaModels[[6]]
balance(enaModels[[6]])
i
i
i
i
i=11
x <- enaModels[[i]]
method='AVG2'
tol=5
n
network.size(x)
enaModels[[1]]
y
warnings()
y
warnings()
q()
n
warnings()
ssCheck(enaModels)
x
is.network(enaModels)
warnings()
test <- lapply(enaModels,ssCheck)
test
test <- unlist(test)
test
test[test!=TRUE]
force.balance
q()
n
force.balance
warnings()
q()
n
q()
n
