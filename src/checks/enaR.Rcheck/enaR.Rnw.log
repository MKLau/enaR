
> opar <- par(las = 1, mar = c(0, 0, 0, 0), xpd = TRUE, 
+     bg = "white")

> if (all(ls() != "f.list")) {
+     require(codetools)
+     library(enaR)
+     called.by <- function(tarFunc, tarPack) {
+         flist <- sapply( .... [TRUNCATED] 
Loading required package: codetools
Loading required package: sna
sna: Tools for Social Network Analysis
Version 2.3-1 created on 2013-02-28.
copyright (c) 2005, Carter T. Butts, University of California-Irvine
 For citation information, type citation("sna").
 Type help(package="sna") to get started.

Loading required package: network
network: Classes for Relational Data
Version 1.8.0 created on August 19, 2013.
copyright (c) 2005, Carter T. Butts, University of California-Irvine
                    Mark S. Handcock, University of Washington
                    David R. Hunter, Penn State University
                    Martina Morris, University of Washington
 For citation information, type citation("network").
 Type help("network-package") to get started.


Attaching package: ‘network’

The following object is masked from ‘package:sna’:

    %c%

Loading required package: MASS
Loading required package: stringr
Loading required package: xlsx
Loading required package: xlsxjars
Loading required package: rJava

Attaching package: ‘enaR’

The following object is masked from ‘package:sna’:

    structure.statistics


> plot(f.net, displaylabels = TRUE, label.cex = 0.85, 
+     arrowhead.cex = 0.65, edge.lwd = 0.75, vertex.col = "lightblue", 
+     vertex.border = " ..." ... [TRUNCATED] 

> opar <- par(las = 1, mar = c(0, 0, 0, 0), xpd = TRUE, 
+     bg = "white")

> if (all(ls() != "f.list")) {
+     require(codetools)
+     library(enaR)
+     called.by <- function(tarFunc, tarPack) {
+         flist <- sapply( .... [TRUNCATED] 

> plot(f.net, displaylabels = TRUE, label.cex = 0.85, 
+     arrowhead.cex = 0.65, edge.lwd = 0.75, vertex.col = "lightblue", 
+     vertex.border = " ..." ... [TRUNCATED] 

> rm(list = ls())

> par(mfrow = c(1, 1))

> options(width = 72)

> figset <- function() par(mar = c(4, 4, 1, 1) + 0.1)

> options(SweaveHooks = list(fig = figset))

> options(prompt = "> ", continue = "+  ")

> library(enaR)

> flow.mat <- array(abs(rnorm(100, 4, 2)) * sample(c(0, 
+     1), 100, replace = TRUE), dim = c(4, 4))

> rownames(flow.mat) <- colnames(flow.mat) <- paste("node", 
+     (1:nrow(flow.mat)), sep = "")

> inputs <- runif(nrow(flow.mat), 0, 4)

> exports <- inputs

> fake.model <- pack(flow = flow.mat, input = inputs, 
+     export = exports, living = TRUE)
[1] "respiration" "storage"    
Warning in pack(flow = flow.mat, input = inputs, export = exports, living = TRUE) :
  Missing model components: respiration, storage

> fake.model
 Network attributes:
  vertices = 4 
  directed = TRUE 
  hyper = FALSE 
  loops = FALSE 
  multiple = FALSE 
  bipartite = FALSE 
  flow:
     node1           node2           node3            node4        
 Min.   :0.000   Min.   :0.000   Min.   :0.0000   Min.   :0.00000  
 1st Qu.:1.421   1st Qu.:0.000   1st Qu.:0.0000   1st Qu.:0.00000  
 Median :2.239   Median :1.021   Median :0.0000   Median :0.05779  
 Mean   :2.657   Mean   :2.591   Mean   :0.6489   Mean   :1.62579  
 3rd Qu.:3.475   3rd Qu.:3.612   3rd Qu.:0.6489   3rd Qu.:1.68358  
 Max.   :6.150   Max.   :8.320   Max.   :2.5957   Max.   :6.38760  
  balanced = FALSE 
  total edges= 6 
    missing edges= 0 
    non-missing edges= 6 

 Vertex attribute names: 
    export input living output respiration storage vertex.names 

 Edge attribute names: 
    flow 

> attributes(fake.model)
$names
[1] "mel" "gal" "val" "iel" "oel"

$class
[1] "network"


> fake.model %v% "output"
[1] 1.5155058 0.7388896 2.1553382 1.6156669

> fake.model %v% "input"
[1] 1.5155058 0.7388896 2.1553382 1.6156669

> fake.model %v% "living"
[1] TRUE TRUE TRUE TRUE

> fake.model %n% "flow"
         node1    node2    node3     node4
node1 6.150449 0.000000 2.595717 0.1155698
node2 1.894700 0.000000 0.000000 0.0000000
node3 2.583425 8.320484 0.000000 0.0000000
node4 0.000000 2.042127 0.000000 6.3876002

> unpack(fake.model)
$F
         node1    node2    node3     node4
node1 6.150449 0.000000 2.595717 0.1155698
node2 1.894700 0.000000 0.000000 0.0000000
node3 2.583425 8.320484 0.000000 0.0000000
node4 0.000000 2.042127 0.000000 6.3876002

$z
[1] 1.5155058 0.7388896 2.1553382 1.6156669

$r
[1] 0 0 0 0

$e
[1] 1.5155058 0.7388896 2.1553382 1.6156669

$y
[1] 1.5155058 0.7388896 2.1553382 1.6156669

$X
[1] NA NA NA NA

$Living
[1] TRUE TRUE TRUE TRUE


> ssCheck(fake.model)
[1] FALSE

> fake.model <- balance(fake.model, method = "AVG2")
[1] AVG2

> fake.model <- force.balance(fake.model)

> scor.model <- readLines("http://people.uncw.edu/borretts/data/oyster.dat")

> m <- read.scor(scor.model, from.file = FALSE)

> unpack(m)
$F
                   Filter Feeders Microbiota Meiofauna Deposit Feeders
Filter Feeders                  0     0.0000    0.0000          0.0000
Microbiota                      0     0.0000    1.2060          1.2060
Meiofauna                       0     0.0000    0.0000          0.6609
Deposit Feeders                 0     0.0000    0.0000          0.0000
Predators                       0     0.0000    0.0000          0.0000
Deposited Detritus              0     8.1721    7.2745          0.6431
                   Predators Deposited Detritus
Filter Feeders        0.5135            15.7910
Microbiota            0.0000             0.0000
Meiofauna             0.0000             4.2403
Deposit Feeders       0.1721             1.9076
Predators             0.0000             0.3262
Deposited Detritus    0.0000             0.0000

$z
[1] 41.47  0.00  0.00  0.00  0.00  0.00

$r
[1] 25.1650  5.7600  3.5794  0.4303  0.3594  6.1759

$e
[1] 0 0 0 0 0 0

$y
[1] 25.1650  5.7600  3.5794  0.4303  0.3594  6.1759

$X
[1] 2000.0000    2.4121   24.1210   16.2740   69.2370 1000.0000

$Living
[1]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE


> data(oyster)

> m <- oyster

> data(oyster)

> m <- oyster

> set.seed(2)

> plot(m)

> my.col = c("red", "yellow", rgb(204, 204, 153, maxColorValue = 255), 
+     "grey22")

> F = m %n% "flow"

> f = which(F != 0, arr.ind = T)

> opar <- par(las = 1, bg = my.col[4], xpd = TRUE, mai = c(1.02, 
+     0.62, 0.82, 0.42))

> set.seed(2)

> plot(m, vertex.cex = log(m %v% "storage"), label = m %v% 
+     "vertex.names", boxed.labels = FALSE, label.cex = 0.65, vertex.sides = 45, 
+     ed .... [TRUNCATED] 

> rm(opar)

> data(oyster)

> m <- oyster

> set.seed(2)

> plot(m)

> my.col = c("red", "yellow", rgb(204, 204, 153, maxColorValue = 255), 
+     "grey22")

> F = m %n% "flow"

> f = which(F != 0, arr.ind = T)

> opar <- par(las = 1, bg = my.col[4], xpd = TRUE, mai = c(1.02, 
+     0.62, 0.82, 0.42))

> set.seed(2)

> plot(m, vertex.cex = log(m %v% "storage"), label = m %v% 
+     "vertex.names", boxed.labels = FALSE, label.cex = 0.65, vertex.sides = 45, 
+     ed .... [TRUNCATED] 

> rm(opar)

> St <- enaStructure(m)

> attributes(St)
$names
[1] "A"  "ns"


> St$ns
     n  L         C LD      ppr    lam1A mlam1A      rho         R
[1,] 6 12 0.3333333  2 2.147899 2.147899      1 2.147899 0.4655712
            d no.scc no.scc.big      pscc
[1,] 0.147899      2          1 0.8333333

> F <- enaFlow(m)

> attributes(F)
$names
[1] "T"  "G"  "GP" "N"  "NP" "ns"


> F$ns
     Boundary     TST     TSTp      APL       FCI       BFI       DFI
[1,]    41.47 83.5833 125.0533 2.015512 0.1101686 0.4961517 0.1950689
           IFI     ID.F   ID.F.I   ID.F.O    HMG.I    HMG.O AMP.I AMP.O
[1,] 0.3087794 1.582925 1.716607 1.534181 2.051826 1.891638     3     1
     mode0.F  mode1.F  mode2.F  mode3.F mode4.F
[1,]   41.47 32.90504 9.208256 32.90504   41.47

> G <- F$G

> rm(G)

> F$NP
                   Filter Feeders Microbiota Meiofauna Deposit Feeders
Filter Feeders                  1  1.0000000 1.0000000       1.0000000
Microbiota                      0  1.1018630 0.2440716       0.6197856
Meiofauna                       0  0.2971032 1.2971032       0.5604100
Deposit Feeders                 0  0.1240688 0.1240688       1.1240688
Predators                       0  0.0203426 0.0203426       0.0203426
Deposited Detritus              0  1.3885039 1.3885039       1.3885039
                   Predators Deposited Detritus
Filter Feeders     1.0000000          1.0000000
Microbiota         0.1555792          0.1018630
Meiofauna          0.1406747          0.2971032
Deposit Feeders    0.2821649          0.1240688
Predators          1.0051064          0.0203426
Deposited Detritus 0.3485436          1.3885039

> attach(F)
The following object is masked from package:base:

    T

> G
                   Filter Feeders Microbiota Meiofauna Deposit Feeders
Filter Feeders                  0  0.0000000 0.0000000      0.00000000
Microbiota                      0  0.0000000 0.1475753      0.14757529
Meiofauna                       0  0.0000000 0.0000000      0.07793173
Deposit Feeders                 0  0.0000000 0.0000000      0.00000000
Predators                       0  0.0000000 0.0000000      0.00000000
Deposited Detritus              0  0.3670363 0.3267221      0.02888377
                    Predators Deposited Detritus
Filter Feeders     0.01238245          0.3807813
Microbiota         0.00000000          0.0000000
Meiofauna          0.00000000          0.5000059
Deposit Feeders    0.06856574          0.7600000
Predators          0.00000000          0.4757876
Deposited Detritus 0.00000000          0.0000000

> detach(F)

> mExp(F$G, 2)
                   Filter Feeders Microbiota  Meiofauna Deposit Feeders
Filter Feeders                  0  0.1397606 0.12440966      0.01099840
Microbiota                      0  0.0000000 0.00000000      0.01150080
Meiofauna                       0  0.1835203 0.16336297      0.01444205
Deposit Feeders                 0  0.2789476 0.24830879      0.02195166
Predators                       0  0.1746313 0.15545033      0.01374254
Deposited Detritus              0  0.0000000 0.05416549      0.07962750
                     Predators Deposited Detritus
Filter Feeders     0.000000000        0.005891414
Microbiota         0.010118608        0.185945731
Meiofauna          0.005343446        0.059228112
Deposit Feeders    0.000000000        0.032622730
Predators          0.000000000        0.000000000
Deposited Detritus 0.001980437        0.185314635

> enaAscendency(oyster)
Warning in enaAscendency(oyster) :
  Model is missing either export or respiration. Calculations may not be correct.
          AMI      ASC       OH      CAP   ASC.CAP    OH.CAP
[1,] 1.330211 166.3473 211.0979 377.4452 0.4407191 0.5592809

> S <- enaStorage(m)

> attributes(S)
$names
 [1] "X"  "C"  "P"  "S"  "Q"  "CP" "PP" "SP" "QP" "dt" "ns"


> S$ns
          TSS       CIS         BSI         DSI       ISI     ID.S
[1,] 3112.044 0.9940252 0.003331412 0.003320932 0.9933477 299.1171
      ID.S.I   ID.S.O  HMG.S.O HMG.S.I NAS NASP mode0.S  mode1.S
[1,] 454.227 294.1527 1.115985 1.38251  20   21 10.3675 8.226261
     mode2.S  mode3.S mode4.S
[1,] 3093.45 8.226261 10.3675

> UF <- enaUtility(m, eigen.check = TRUE, type = "flow")

> US <- enaUtility(m, eigen.check = TRUE, type = "storage")

> attributes(UF)
$names
[1] "D"  "U"  "Y"  "ns"


> E <- enaEnviron(m)

> attributes(E)
$names
[1] "input"  "output"


> E$output[1]
$`Filter Feeders`
                   Filter Feeders Microbiota   Meiofauna
Filter Feeders                 -1  0.0000000  0.00000000
Microbiota                      0 -0.1970605  0.02908126
Meiofauna                       0  0.0000000 -0.20449723
Deposit Feeders                 0  0.0000000  0.00000000
Predators                       0  0.0000000  0.00000000
Deposited Detritus              0  0.1970605  0.17541596
z                               1  0.0000000  0.00000000
                   Deposit Feeders    Predators Deposited Detritus
Filter Feeders          0.00000000  0.012382445        0.380781288
Microbiota              0.02908126  0.000000000        0.000000000
Meiofauna               0.01593682  0.000000000        0.102249819
Deposit Feeders        -0.06052568  0.004149988        0.045999518
Predators               0.00000000 -0.016532433        0.007865927
Deposited Detritus      0.01550760  0.000000000       -0.536896552
z                       0.00000000  0.000000000        0.000000000
                             y
Filter Feeders     0.606836267
Microbiota         0.138897999
Meiofauna          0.086310586
Deposit Feeders    0.010376176
Predators          0.008666506
Deposited Detritus 0.148912467
z                  0.000000000


> tet <- TET(m)
Warning in set.orient(user.orient) :
  NOTE: output of functions from a particular analytical school will be returned in the standard orientation of that school.

> show(tet)
$realized.input
[1] 25.165000 22.647638 14.582798  2.028052  1.053786 18.107007

$realized.output
[1] 83.5833  0.0000  0.0000  0.0000  0.0000  0.0000

$unit.input
[1] 1.000000 3.931882 4.074090 4.713111 2.932069 2.931882

$unit.output
[1] 2.015512 1.836089 2.540670 3.124836 2.234317 2.594261


> tes <- TES(m)

> show(tes)
$realized.input
    Filter Feeders         Microbiota          Meiofauna 
        2000.00000            2.41209           24.12171 
   Deposit Feeders          Predators Deposited Detritus 
          16.27440           69.23803         1000.03118 

$realized.output
[1] 3112.044    0.000    0.000    0.000    0.000    0.000

$unit.input
    Filter Feeders         Microbiota          Meiofauna 
       289.3658066          0.6561948          7.3735209 
   Deposit Feeders          Predators Deposited Detritus 
        11.5308112        109.7205293        265.1036470 

$unit.output
    Filter Feeders         Microbiota          Meiofauna 
          75.04326           16.06273           41.03146 
   Deposit Feeders          Predators Deposited Detritus 
          65.81279          132.44451           66.11575 


> C <- enaControl(m)

> attributes(C)
$names
[1] "CN" "CQ"


> mti <- enaMTI(oyster)

> attributes(mti)
$names
[1] "G"  "FP" "Q"  "M" 


> mti$M
[1] NA

> mti <- enaMTI(oyster, eigen.check = FALSE)

> attributes(mti)
$names
[1] "G"  "FP" "Q"  "M" 


> mti$M
                   Filter Feeders  Microbiota    Meiofauna
Filter Feeders      -0.0250635283  0.16956382  0.431493557
Microbiota          -0.0015848556 -0.30675078 -0.182458391
Meiofauna           -0.0001241781 -0.47413204 -0.070959618
Deposit Feeders     -0.0069255188 -0.26769125 -0.007062628
Predators           -0.0301817448  0.02000515 -0.004028911
Deposited Detritus  -0.0034657973  0.21795628  0.612654910
                   Deposit Feeders    Predators Deposited Detritus
Filter Feeders          0.26144106  0.795834137        0.516016759
Microbiota              0.20520368  0.050323410       -0.295378609
Meiofauna               0.01607831  0.003942987       -0.001592286
Deposit Feeders        -0.10329881  0.219903765        0.177109591
Predators              -0.07586335 -0.041648786       -0.019939324
Deposited Detritus      0.44874394  0.110048344       -0.251366300

> ns <- get.ns(m)
Warning in enaAscendency(x) :
  Model is missing either export or respiration. Calculations may not be correct.

> str(ns)
'data.frame':	1 obs. of  62 variables:
 $ n          : num 6
 $ L          : num 12
 $ C          : num 0.333
 $ LD         : num 2
 $ ppr        : num 2.15
 $ lam1A      : num 2.15
 $ mlam1A     : num 1
 $ rho        : num 2.15
 $ R          : num 0.466
 $ d          : num 0.148
 $ no.scc     : num 2
 $ no.scc.big : num 1
 $ pscc       : num 0.833
 $ Boundary   : num 41.5
 $ TST        : num 83.6
 $ TSTp       : num 125
 $ APL        : num 2.02
 $ FCI        : num 0.11
 $ BFI        : num 0.496
 $ DFI        : num 0.195
 $ IFI        : num 0.309
 $ ID.F       : num 1.58
 $ ID.F.I     : num 1.72
 $ ID.F.O     : num 1.53
 $ HMG.I      : num 2.05
 $ HMG.O      : num 1.89
 $ AMP.I      : num 3
 $ AMP.O      : num 1
 $ mode0.F    : num 41.5
 $ mode1.F    : num 32.9
 $ mode2.F    : num 9.21
 $ mode3.F    : num 32.9
 $ mode4.F    : num 41.5
 $ AMI        : num 1.33
 $ ASC        : num 166
 $ OH         : num 211
 $ CAP        : num 377
 $ ASC.CAP    : num 0.441
 $ OH.CAP     : num 0.559
 $ TSS        : num 3112
 $ CIS        : num 0.994
 $ BSI        : num 0.00333
 $ DSI        : num 0.00332
 $ ISI        : num 0.993
 $ ID.S       : num 299
 $ ID.S.I     : num 454
 $ ID.S.O     : num 294
 $ HMG.S.O    : num 1.12
 $ HMG.S.I    : num 1.38
 $ NAS        : num 20
 $ NASP       : num 21
 $ mode0.S    : num 10.4
 $ mode1.S    : num 8.23
 $ mode2.S    : num 3093
 $ mode3.S    : num 8.23
 $ mode4.S    : num 10.4
 $ lam1D      : num 0.899
 $ synergism.F: num 4.92
 $ mutualism.F: num 2.27
 $ lam1DS     : num 0.302
 $ synergism.S: num 13.1
 $ mutualism.S: num 2.6

> oyster.ena <- enaAll(oyster)
Warning in enaAscendency(x) :
  Model is missing either export or respiration. Calculations may not be correct.

> names(oyster.ena)
[1] "ascendency" "control"    "environ"    "flow"       "mti"       
[6] "storage"    "structure"  "utility"   

> F <- enaFlow(oyster)

> ec <- environCentrality(F$N)

> show(ec)
$ECin
    Filter Feeders         Microbiota          Meiofauna 
         0.1404961          0.1279889          0.1771034 
   Deposit Feeders          Predators Deposited Detritus 
         0.2178241          0.1557484          0.1808391 

$ECout
    Filter Feeders         Microbiota          Meiofauna 
        0.06970737         0.19108709         0.20595483 
   Deposit Feeders          Predators Deposited Detritus 
        0.12350944         0.07903903         0.33070223 

$AEC
    Filter Feeders         Microbiota          Meiofauna 
         0.1051017          0.1595380          0.1915291 
   Deposit Feeders          Predators Deposited Detritus 
         0.1706668          0.1173937          0.2557707 


> eigenCentrality(F$G)
$EVCin
[1] 0.1207568 0.1093625 0.1876329 0.2518905 0.1470501 0.1833072

$EVCout
[1] 0.00000000 0.23325048 0.26566843 0.11130122 0.01286707 0.37691280

$AEVC
[1] 0.06037842 0.17130647 0.22665067 0.18159586 0.07995858 0.28011000


> opar <- par(las = 1, mar = c(7, 5, 1, 1), xpd = TRUE, 
+     bg = "white")

> o <- order(ec$AEC, decreasing = TRUE)

> bp <- barplot(ec$AEC[o], names.arg = NA, ylab = "Average Environ Centrality", 
+     col = "black", border = NA)

> text(bp, -0.008, labels = names(ec$AEC)[o], srt = 35, 
+     adj = 1, cex = 1)

> rm(opar)

> opar <- par(las = 1, mar = c(7, 5, 1, 1), xpd = TRUE, 
+     bg = "white")

> o <- order(ec$AEC, decreasing = TRUE)

> bp <- barplot(ec$AEC[o], names.arg = NA, ylab = "Average Environ Centrality", 
+     col = "black", border = NA)

> text(bp, -0.008, labels = names(ec$AEC)[o], srt = 35, 
+     adj = 1, cex = 1)

> rm(opar)

> get.orient()
[1] "rc"

> flow.rc <- enaFlow(oyster)$G

> set.orient("school")
Warning in set.orient("school") :
  NOTE: output of functions from a particular analytical school will be returned in the standard orientation of that school.

> get.orient()
[1] "school"

> flow.cr <- enaFlow(oyster)$G

> flow.rc == t(flow.cr)
                   Filter Feeders Microbiota Meiofauna Deposit Feeders
Filter Feeders               TRUE       TRUE      TRUE            TRUE
Microbiota                   TRUE       TRUE      TRUE            TRUE
Meiofauna                    TRUE       TRUE      TRUE            TRUE
Deposit Feeders              TRUE       TRUE      TRUE            TRUE
Predators                    TRUE       TRUE      TRUE            TRUE
Deposited Detritus           TRUE       TRUE      TRUE            TRUE
                   Predators Deposited Detritus
Filter Feeders          TRUE               TRUE
Microbiota              TRUE               TRUE
Meiofauna               TRUE               TRUE
Deposit Feeders         TRUE               TRUE
Predators               TRUE               TRUE
Deposited Detritus      TRUE               TRUE

> set.orient("rc")

> data(bgcModels)

> data(troModels)

> head(names(bgcModels))
[1] "Hubbard Brook (Ca)(Waide)"     "Hardwood Forest, NH (Ca)"     
[3] "Duglas Fir Forest, WA (Ca)"    "Duglas Fir Forest, WA (K)"    
[5] "Puerto Rican Rain Forest (Ca)" "Puerto Rican Rain Forest (K)" 

> head(names(troModels))
[1] "Marine Coprophagy (oyster)" "Lake Findley "             
[3] "Mirror Lake"                "Lake Wingra"               
[5] "Marion Lake"                "Cone Springs"              

> x <- troModels[[1]]

> x <- troModels$"Marine Coprophagy (oyster)"

> summary(x)
Network attributes:
  vertices = 4
  directed = TRUE
  hyper = FALSE
  loops = FALSE
  multiple = FALSE
  bipartite = FALSE
  flow:
     SHRIMP  BENTHIC ORGANISMS SHRIMP FECES & BACTERIA
 Min.   :0   Min.   : 0.00     Min.   : 0.000         
 1st Qu.:0   1st Qu.: 0.00     1st Qu.: 0.000         
 Median :0   Median : 7.65     Median : 0.000         
 Mean   :0   Mean   :17.05     Mean   : 5.475         
 3rd Qu.:0   3rd Qu.:24.70     3rd Qu.: 5.475         
 Max.   :0   Max.   :52.90     Max.   :21.900         
 BENTHIC FECES & BACTERIA
 Min.   : 0.0            
 1st Qu.: 0.0            
 Median : 0.0            
 Mean   :19.9            
 3rd Qu.:19.9            
 Max.   :79.6            
  balanced = TRUE
 total edges = 4 
   missing edges = 0 
   non-missing edges = 4 
 density = 0.3333333 

Vertex attributes:

 export:
   logical valued attribute
   attribute summary:
   Mode    NA's 
logical       4 

 input:
   numeric valued attribute
   attribute summary:
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00    0.00   62.05   94.90  157.00  255.50 

 living:
   logical valued attribute
   attribute summary:
   Mode   FALSE    TRUE    NA's 
logical       2       2       0 

 output:
   numeric valued attribute
   attribute summary:
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   6.60   21.67   64.45   94.90  137.70  244.10 

 respiration:
   numeric valued attribute
   attribute summary:
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   6.60   21.67   64.45   94.90  137.70  244.10 

 storage:
   numeric valued attribute
   attribute summary:
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      1       1       1       1       1       1 
  vertex.names:
   character valued attribute
   4 valid vertex names

Edge attributes:

 flow:
   numeric valued attribute
   attribute summary:
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0       0       0       0       0       0 

Network adjacency matrix:
                         SHRIMP BENTHIC ORGANISMS
SHRIMP                        0                 0
BENTHIC ORGANISMS             0                 0
SHRIMP FECES & BACTERIA       0                 1
BENTHIC FECES & BACTERIA      0                 1
                         SHRIMP FECES & BACTERIA
SHRIMP                                         1
BENTHIC ORGANISMS                              0
SHRIMP FECES & BACTERIA                        0
BENTHIC FECES & BACTERIA                       0
                         BENTHIC FECES & BACTERIA
SHRIMP                                          0
BENTHIC ORGANISMS                               1
SHRIMP FECES & BACTERIA                         0
BENTHIC FECES & BACTERIA                        0

> data(troModels)

> m.list <- lapply(troModels, balance)
[1] BALANCED
[1] BALANCED
[1] BALANCED
[1] BALANCED
[1] BALANCED
[1] BALANCED
[1] BALANCED
[1] BALANCED
[1] BALANCED
[1] BALANCED
[1] AVG2
[1] AVG2
[1] BALANCED
[1] AVG2
[1] AVG2
[1] BALANCED
[1] AVG2
[1] BALANCED
[1] AVG2
[1] AVG2
[1] BALANCED
[1] BALANCED
[1] BALANCED
[1] AVG2
[1] AVG2
[1] AVG2
[1] AVG2
[1] BALANCED
[1] AVG2
[1] AVG2
[1] BALANCED
[1] AVG2
[1] BALANCED
[1] BALANCED
[1] BALANCED
[1] BALANCED
[1] BALANCED
[1] BALANCED
[1] BALANCED
[1] BALANCED
[1] BALANCED
[1] BALANCED
[1] BALANCED
[1] BALANCED
[1] BALANCED
[1] AVG2
[1] BALANCED
[1] BALANCED
[1] BALANCED
[1] AVG2
[1] AVG2
[1] AVG2
[1] AVG2
[1] AVG2

Java requested System.exit(130), closing R.
